import 'dart:io';
import 'package:mason/mason.dart';

Future<void> run(HookContext context) async {
  final logger = context.logger;
  final featureName = (context.vars['feature_name'] as String).snakeCase;
  final pascalCaseFeatureName = featureName.pascalCase;
  final diFile = File('lib/core/di/dependencies_injection.dart');
  if (!await diFile.exists()) {
    logger.warn('⚠️ DI file not found: ${diFile.path}');
    return;
  }
  var lines = await diFile.readAsLines();
  final originalContent = lines.join(
      '\n'); // Add imports  _addImports(lines, featureName, pascalCaseFeatureName);  // Add registrations  _addRegistration(    lines,    'void _registerDataSources()',    '''\n\n    // Auto-registered: $pascalCaseFeatureName Data Sources\n    getIt.registerSingleton<${pascalCaseFeatureName}LocalDataSource>(\n      ${pascalCaseFeatureName}LocalDataSourceImpl(),\n    );\n    \n    getIt.registerSingleton<${pascalCaseFeatureName}RemoteDataSource>(\n      ${pascalCaseFeatureName}RemoteDataSourceImpl(),\n    );''',    'getIt.registerSingleton<${pascalCaseFeatureName}LocalDataSource>',  );  _addRegistration(    lines,    'void _registerRepositories()',    '''\n\n    // Auto-registered: $pascalCaseFeatureName Repository\n    getIt.registerLazySingleton<${pascalCaseFeatureName}Repository>(\n      () => ${pascalCaseFeatureName}RepositoryImpl(\n        getIt<${pascalCaseFeatureName}LocalDataSource>(),\n        getIt<${pascalCaseFeatureName}RemoteDataSource>(),\n      ),\n    );''',    'getIt.registerLazySingleton<${pascalCaseFeatureName}Repository>',  );  _addRegistration(    lines,    'void _registerUseCases()',    '''\n\n    // Auto-registered: $pascalCaseFeatureName Use Cases\n    getIt.registerLazySingleton<Get${pascalCaseFeatureName}UseCase>(\n      () => Get${pascalCaseFeatureName}UseCase(getIt<${pascalCaseFeatureName}Repository>()),\n    );\n    \n    getIt.registerLazySingleton<Create${pascalCaseFeatureName}UseCase>(\n      () => Create${pascalCaseFeatureName}UseCase(getIt<${pascalCaseFeatureName}Repository>()),\n    );\n    \n    getIt.registerLazySingleton<Update${pascalCaseFeatureName}UseCase>(\n      () => Update${pascalCaseFeatureName}UseCase(getIt<${pascalCaseFeatureName}Repository>()),\n    );\n    \n    getIt.registerLazySingleton<Delete${pascalCaseFeatureName}UseCase>(\n      () => Delete${pascalCaseFeatureName}UseCase(getIt<${pascalCaseFeatureName}Repository>()),\n    );''',    'getIt.registerLazySingleton<Get${pascalCaseFeatureName}UseCase>',  );  _addRegistration(    lines,    'void _registerProviders()',    '''\n\n    // Auto-registered: $pascalCaseFeatureName Provider\n    getIt.registerFactory<${pascalCaseFeatureName}Provider>(\n      () => ${pascalCaseFeatureName}Provider(),\n    );''',    'getIt.registerFactory<${pascalCaseFeatureName}Provider>',  );  final newContent = lines.join('\n');  if (originalContent != newContent) {    await diFile.writeAsString(newContent);    logger.success('✅ DI registration completed for $pascalCaseFeatureName feature');  } else {    logger.info('DI registration for $pascalCaseFeatureName feature already exists');  }}void _addImports(List<String> lines, String snakeCase, String pascalCase) {  final importBlock = '''\n\n// Auto-generated imports for $pascalCase feature\nimport '../features/$snakeCase/data/local/data_sources/${snakeCase}_local_data_source.dart';\nimport '../features/$snakeCase/data/local/data_sources/${snakeCase}_local_data_source_impl.dart';\nimport '../features/$snakeCase/data/remote/data_sources/${snakeCase}_remote_data_source.dart';\nimport '../features/$snakeCase/data/remote/data_sources/${snakeCase}_remote_data_source_impl.dart';\nimport '../features/$snakeCase/data/repositories/${snakeCase}_repository_impl.dart';\nimport '../features/$snakeCase/domain/repositories/${snakeCase}_repository.dart';\nimport '../features/$snakeCase/domain/use_cases/get_${snakeCase}_usecase.dart';\nimport '../features/$snakeCase/domain/use_cases/create_${snakeCase}_usecase.dart';\nimport '../features/$snakeCase/domain/use_cases/update_${snakeCase}_usecase.dart';\nimport '../features/$snakeCase/domain/use_cases/delete_${snakeCase}_usecase.dart';\nimport '../features/$snakeCase/presentation/providers/${snakeCase}_provider.dart';''';  if (lines.any((line) => line.contains('// Auto-generated imports for $pascalCase feature'))) {    return;  }  final importIndex = lines.indexWhere((line) => line.startsWith('import'));  if (importIndex != -1) {    lines.insert(importIndex, importBlock);  }}void _addRegistration(  List<String> lines,  String functionSignature,  String registrationBlock,  String checkString,) {  if (lines.any((line) => line.contains(checkString))) {    return;  }  final functionStartIndex = lines.indexWhere((line) => line.contains(functionSignature));  if (functionStartIndex == -1) {    return;  }  var openBraces = 0;  var functionEndIndex = -1;  for (var i = functionStartIndex; i < lines.length; i++) {    if (lines[i].contains('{')) {      openBraces++;    }    if (lines[i].contains('}')) {      openBraces--;      if (openBraces == 0) {        functionEndIndex = i;        break;      }    }  }  if (functionEndIndex != -1) {    final body = lines.sublist(functionStartIndex + 1, functionEndIndex).join('').trim();    if (body.isEmpty || body.startsWith('// TODO')) {        lines.insert(functionEndIndex, registrationBlock);    } else {        lines.insert(functionEndIndex, registrationBlock);    }  }}